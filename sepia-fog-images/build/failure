#!/bin/bash

set -ex

funPowerCycle () {
  host=$(echo ${1} | cut -d '.' -f1)
  powerstatus=$(ipmitool -I lanplus -U inktank -P $SEPIA_IPMI_PASS -H ${host}.ipmi.sepia.ceph.com chassis power status | cut -d ' ' -f4-)
  if [ "$powerstatus" == "off" ]; then
     ipmitool -I lanplus -U inktank -P $SEPIA_IPMI_PASS -H ${host}.ipmi.sepia.ceph.com chassis power on
  else
     ipmitool -I lanplus -U inktank -P $SEPIA_IPMI_PASS -H ${host}.ipmi.sepia.ceph.com chassis power cycle
  fi
}

# Clone or update teuthology
if [ ! -d teuthology ]; then
  git clone https://github.com/ceph/teuthology
  cd teuthology
else
  cd teuthology
  git pull
fi

# Bootstrap teuthology
./bootstrap

cd $WORKSPACE

source $WORKSPACE/teuthology/virtualenv/bin/activate

allhosts=$(teuthology-lock --brief | grep "Locked to capture FOG image for Jenkins build $BUILD_NUMBER" | cut -d '.' -f1 | tr "\n" " ")
# Set DHCP server back to FOG
for machine in $allhosts; do
  ssh ubuntu@store01.front.sepia.ceph.com "sudo /usr/local/sbin/set-next-server.sh $machine fog"
done

# Restart dhcpd (for some reason doing this every time we set the next-server in the for loop above, dhcpd would fail to start)
ssh ubuntu@store01.front.sepia.ceph.com "sudo service dhcpd restart"

# Get FOG 'Capture' TaskID
fogcaptureid=$(curl -s -k -H "fog-api-token: ${FOG_API_TOKEN}" -H "fog-user-token: ${FOG_USER_TOKEN}" http://fog.front.sepia.ceph.com/fog/tasktype -d '{"name": "Capture"}' -X GET | jq -r '.tasktypes[0].id')

# Delete all active Capture tasks
for task in $(curl -s -k -H "fog-api-token: ${FOG_API_TOKEN}" -H "fog-user-token: ${FOG_USER_TOKEN}" http://fog.front.sepia.ceph.com/fog/task/active -d '{"typeID": "'${fogcaptureid}'"}' -X GET | jq -r '.tasks[].id'); do
  curl -s -k -H "fog-api-token: ${FOG_API_TOKEN}" -H "fog-user-token: ${FOG_USER_TOKEN}" http://fog.front.sepia.ceph.com/fog/task/${task} -X DELETE
done

set +e

# Just unlock machines.  FOG will reimage them on the next job they run.
for host in $allhosts; do
  teuthology-lock --unlock $host
done

# Unpause the queue
for type in $MACHINETYPES; do
  teuthology-queue --pause 0 --machine_type $type
done
